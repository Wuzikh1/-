name: OnePlus SM8750 Build SuKiSu SUSFS (Optimized)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_13'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      ENABLE_LZ4:
        description: "启用LZ4压缩"
        required: true
        type: boolean
        default: false
      ENABLE_KPM:
        description: "启用KPM模块"
        required: true
        type: boolean
        default: true

env:
  KERNEL_WORKSPACE: ${{ github.workspace }}/kernel_workspace
  KERNEL_PLATFORM: ${{ github.workspace }}/kernel_workspace/kernel_platform
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  REPO_CACHE_DIR: ${{ github.workspace }}/.repo_cache
  SUKISU_CACHE: ${{ github.workspace }}/.sukisu_cache

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.generate-key.outputs.cache-key }}
    steps:
      - name: Generate Cache Key
        id: generate-key
        run: |
          echo "cache-key=$(date +%s)-${{ github.run_id }}" >> $GITHUB_OUTPUT

  build:
    needs: prebuild
    runs-on: ubuntu-latest
    env:
      KSU_VERSION: ${{ env.KSUVER }}
    steps:
      # 缓存恢复阶段
      - name: Restore CCache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ needs.prebuild.outputs.cache-key }}-ccache
          restore-keys: |
            ${{ needs.prebuild.outputs.cache-key }}-ccache-

      - name: Restore Repo Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.REPO_CACHE_DIR }}
          key: ${{ needs.prebuild.outputs.cache-key }}-repo
          restore-keys: |
            ${{ needs.prebuild.outputs.cache-key }}-repo-

      # 初始化环境
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 7168
          temp-reserve-mb: 3072
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "wuzikh"
          git config --global user.email "${{ secrets.BUILD_EMAIL || 'wuzikh@163.com' }}"
          git config --global init.defaultBranch main

      # 源码同步
      - name: Initialize Workspace
        run: |
          mkdir -p ${{ env.KERNEL_WORKSPACE }}
          [ -d "${{ env.REPO_CACHE_DIR }}" ] || mkdir -p ${{ env.REPO_CACHE_DIR }}

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            python3 git curl ccache \
            build-essential flex bison \
            libssl-dev libelf-dev bc \
            rsync kmod cpio

      - name: Install Repo Tool
        run: |
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      # 源码同步（带缓存加速）
      - name: Sync Source Code
        run: |
          cd ${{ env.KERNEL_WORKSPACE }}
          repo init \
            -u https://github.com/JiuGeFaCai/kernel_manifest.git \
            -b refs/heads/oneplus/${{ inputs.CPU }} \
            -m ${{ inputs.FEIL }}.xml \
            --depth=1 \
            --repo-rev=main \
            --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo
          repo sync \
            -c \
            -j$(nproc --all) \
            --no-tags \
            --optimized-fetch \
            --prune \
            --force-sync
          rm -f kernel_platform/common/android/abi_gki_protected_exports_* || true
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || true

      # SukiSU 配置
      - name: Set up SukiSU
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main) + 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # SUSFS 配置
      - name: Set up SUSFS
        run: |
          cd ${{ env.KERNEL_WORKSPACE }}
          git clone --depth=1 \
            https://gitlab.com/simonpunk/susfs4ksu.git \
            -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
          git clone --depth=1 \
            https://github.com/ExmikoN/SukiSU_patch.git
          
          cd ${{ env.KERNEL_PLATFORM }}
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          if ${{ inputs.ENABLE_LZ4 }}; then
            cp -r ../SukiSU_patch/other/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/lz4k/crypto/* ./common/crypto
          fi

      # 补丁应用
      - name: Apply Patches
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/common
          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
          sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      # 隐藏补丁
      - name: Apply Hide Stuff Patches
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      # LZ4 补丁
      - name: Apply LZ4 Patches
        if: ${{ inputs.ENABLE_LZ4 }}
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/common
          cp ../../SukiSU_patch/other/lz4k_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      # 内核配置
      - name: Configure Kernel
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if ${{ inputs.ENABLE_KPM }}; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            rm -rf ./KernelSU/kpm 2>/dev/null || true
          fi
          
          if ${{ inputs.ENABLE_LZ4 }}; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      # 内核名称设置
      - name: Set Kernel Name
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          sed -i 's/res="\$res\$(cat "\$file")"/res="${{ inputs.KERNEL_NAME }}"/g' ./common/scripts/setlocalversion

      # 调度器扩展
      - name: Add Sched Ext
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          git clone --depth=1 https://github.com/JiuGeFaCai/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched
          sed -i.bak '/# include "ext.c"/a\# include "hmbird_sched_proc_main.c"\n#endif\n\n#ifdef CONFIG_SLIM_SCHED\n# include "slim_sysctl.c"' build_policy.c

      # 构建内核
      - name: Build Kernel
        run: |
          cd ${{ env.KERNEL_PLATFORM }}
          tools/bazel run \
            --config=fast \
            --config=stamp \
            --lto=thin \
            //common:kernel_aarch64_dist \
            -- \
            --dist_dir=dist

      # AnyKernel3 处理
      - name: Process AnyKernel3
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      # 产物打包
      - name: Package Artifacts
        run: |
          cd ${{ env.KERNEL_PLATFORM }}/dist
          git clone --depth=1 https://github.com/JiuGeFaCai/AnyKernel3.git
          rm -rf ./AnyKernel3/.git ./AnyKernel3/push.sh
          cp Image ./AnyKernel3/
          zip -r9 AnyKernel3_${{ env.KSUVER }}.zip AnyKernel3/
          mv Image Image_${{ env.KSUVER }}

      # 上传产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SuKiSu${{ inputs.ENABLE_LZ4 && '_LZ4' || '' }}${{ inputs.ENABLE_KPM && '_KPM' || '' }}_${{ env.KSUVER }}_${{ inputs.FEIL }}
          path: |
            ${{ env.KERNEL_PLATFORM }}/dist/AnyKernel3/*
            ${{ env.KERNEL_PLATFORM }}/dist/Image_${{ env.KSUVER }}

      # 资源监控
      - name: Resource Report
        if: always()
        run: |
          echo "=== Disk Usage ==="
          df -h
          echo "=== Memory Usage ==="
          free -h
          echo "=== Build Time ==="
          times

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.KSUVER }}"
          name: "SuKiSu Kernel (${{ env.KSUVER }})"
          body: |
            ​**Build Parameters**​
            - CPU Branch: `${{ inputs.CPU }}`
            - Config File: `${{ inputs.FEIL }}`
            - Android Version: `${{ inputs.ANDROID_VERSION }}`
            - Kernel Version: `${{ inputs.KERNEL_VERSION }}`
            - LZ4 Compression: `${{ inputs.ENABLE_LZ4 }}`
            - KPM Module: `${{ inputs.ENABLE_KPM }}`
            - Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          files: |
            AnyKernel3_${{ env.KSUVER }}.zip
            Image_${{ env.KSUVER }}
          draft: false
          prerelease: false

      - name: Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "Build Failed - ${{ github.workflow }}"
          SLACK_MESSAGE: "Check run ${{ github.run_id }}"
